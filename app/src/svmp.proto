// svmp.proto
// Client to Proxy Server protocol

// Copyright (c) 2012-2014, The MITRE Corporation, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package svmp;

option optimize_for = LITE_RUNTIME;
option java_package = "edu.wing.yytang.protocol";
option java_outer_classname = "SVMPProtocol";


// Client to server message wrapper
message Request
{
  RequestType type = 1;

  enum RequestType {
    VIDEO_PARAMS  = 0;
    TOUCHEVENT    = 1;
    SENSOREVENT   = 2;
    LOCATION      = 3;
    INTENT        = 4;
    SCREENINFO    = 5;
    WEBRTC        = 6;
    ROTATION_INFO = 7;
    PING          = 8; // client-initiated ping measurement (ms)
    TIMEZONE      = 9;
    APPS          = 10; // client request for available apps on the VM
    KEYEVENT      = 11;
    CONFIG        = 12;
  }

  // repeated to allow batching multiple events in a single message
  repeated TouchEvent touch = 2;
  repeated SensorEvent sensor = 3;

  LocationRequest locationRequest = 6;
  Intent intent = 7;

  WebRTCMessage webrtcMsg = 9;
  RotationInfo rotationInfo = 10;
  Ping pingRequest = 11;
  VideoStreamInfo videoInfo = 12; // server->VM message
  string timezoneId = 13;
  AppsRequest apps = 14;
  KeyEvent key = 15;
  Config config = 16;
}

// Server to client message wrapper
message Response
{

  enum ResponseType {
    ERROR         = 0;
    AUTH          = 1;
    VMREADY       = 2;
    SCREENINFO    = 3; // touch screen coordinate scaling info
    INTENT        = 4; // intent data in 'proxy'
    NOTIFICATION  = 5; // notification data in 'proxy'
    LOCATION      = 6; // location request
    WEBRTC        = 7; // WebRTC signalling message
    PING          = 8; // response to client ping measurement (ms)
    APPS          = 9; // response to client request for available apps
  }

  ResponseType type = 1;

  AuthResponse authResponse = 3;
  Intent intent = 4;
  Notification notification = 5;

  LocationResponse locationResponse = 6;
  Ping pingResponse = 7;
  AppsResponse apps = 8;

  ScreenInfo screenInfo = 16;
  VideoStreamInfo videoInfo = 17;
  WebRTCMessage webrtcMsg = 18;
}

//=====================================================================
// Cross platform intent & notification IPC
//=====================================================================

enum IntentAction
{
  ACTION_VIEW = 0;
  ACTION_DIAL = 1;
}

// C<->S
message Intent {
  //Corresponds to Intent 'action' parameter, but limited to supported actions
  IntentAction action = 1;

  //Encode all bundle extras as strings, and decode them later into specific data types
  repeated Tuple extras = 2;

  //Correspond to optional Intent parameters
  string data = 3;
  repeated int32 flags = 4;
  repeated string categories = 5;

  //For approximating a Java Map structure (Map<String,String>)
  message Tuple {
    string key = 1;
    string value = 2;
  }
}

// C<->S
message Notification {
  //All of the following correspond directly to fields in Android's Notification object,
  //with the exception of the icon fields which directly include image data rather than references
  string contentTitle = 1;
  string contentText = 2;
  bytes smallIcon = 3;
  bytes largeIcon = 4;
  // TODO: add additional optional notification fields as necessary
}

//=====================================================================
// Touch screen
//=====================================================================

// C->S
message TouchEvent {
  int32 action = 1;
  repeated PointerCoords items = 2;

  int64 downTime = 3;
  int64 eventTime = 4;
  repeated HistoricalEvent historical = 5;
  int32 edgeFlags = 6;

  message PointerCoords {
    int32 id = 1;
    float x = 2;
    float y = 3;
  }

  message HistoricalEvent {
    int64 eventTime = 1;
    repeated PointerCoords coords = 2;
  }
}

// S->C
message ScreenInfo {
  int32 x = 1;
  int32 y = 2;
}

//=====================================================================
// Sensors
//=====================================================================

// Synced with android.hardware.Sensor
enum SensorType {
  ACCELEROMETER       = 0;
  MAGNETIC_FIELD      = 1;
  ORIENTATION         = 2;
  GYROSCOPE           = 3;
  LIGHT               = 4;
  PRESSURE            = 5;
  TEMPERATURE         = 6;
  PROXIMITY           = 7;
  GRAVITY             = 8;
  LINEAR_ACCELERATION = 9;
  ROTATION_VECTOR     = 10;
  RELATIVE_HUMIDITY   = 11;
  AMBIENT_TEMPERATURE = 12;
}

// C->S: Sensor update event
message SensorEvent {
  SensorType type = 1;
  int32 accuracy  = 2;
  int64 timestamp = 3;
  repeated float values = 4;
}

//=====================================================================
// Location
//=====================================================================

// C->S: Location provider information
message LocationProviderInfo {
  string provider  = 1;
  bool requiresNetwork = 2;
  bool requiresSatellite = 3;
  bool requiresCell = 4;
  bool hasMonetaryCost = 5;
  bool supportsAltitude = 6;
  bool supportsSpeed = 7;
  bool supportsBearing = 8;
  int32 powerRequirement = 9;
  int32 accuracy = 10;
}

// C->S: Location provider status update
message LocationProviderStatus {
  string provider = 1;
  int32 status    = 2;
  //Encode all bundle extras as strings, and decode them later into specific data types
  repeated Tuple extras    = 3;

  //For approximating a Java Map structure (Map<String,String>)
  message Tuple {
    string key   = 1;
    string value = 2;
  }
}

// C->S: Location provider enabled update
message LocationProviderEnabled {
  string provider = 1;
  bool enabled    = 2;
}

// C->S: Location update event
message LocationUpdate {
  double latitude  = 1;
  double longitude = 2;
  int64 time       = 3;
  string provider  = 4;
  float accuracy   = 5;
  double altitude  = 6;
  float bearing    = 7;
  float speed      = 8;
}

// C->S: Wrapper for LocationProviderInfo, LocationProviderStatus,
// LocationProviderEnabled, and LocationProviderUpdate messages
message LocationRequest {
  LocationRequestType type                = 1;

  enum LocationRequestType {
    PROVIDERINFO    = 0;
    PROVIDERSTATUS  = 1;
    PROVIDERENABLED = 2;
    LOCATIONUPDATE  = 3;
  }

  LocationProviderInfo providerInfo       = 2;
  LocationProviderStatus providerStatus   = 3;
  LocationProviderEnabled providerEnabled = 4;
  LocationUpdate update                   = 5;
}

// S->C: Location update request (one-time or long-term)
message LocationSubscribe {
  LocationSubscribeType type = 1;

  enum LocationSubscribeType {
    SINGLE_UPDATE    = 0;
    MULTIPLE_UPDATES = 1;
  }

  string provider            = 2;
  int64 minTime              = 3;
  float minDistance          = 4;
}

// S->C: Unsubscribe from long-term location updates
message LocationUnsubscribe {
  string provider = 1;
}

// S->C: Wrapper for LocationSubscribe and LocationUnsubscribe messages
message LocationResponse {
  LocationResponseType type       = 1;

  enum LocationResponseType {
    SUBSCRIBE   = 0;
    UNSUBSCRIBE = 1;
  }

  LocationSubscribe subscribe     = 2;
  LocationUnsubscribe unsubscribe = 3;
}

//=====================================================================
// Auth
//=====================================================================

// S->C
message AuthResponse {
  AuthResponseType type = 1;

  enum AuthResponseType {
    AUTH_FAIL            = 0; // sent in response to an AuthRequest
    SESSION_MAX_TIMEOUT  = 1; // sent when the session times out
  }

}

//=====================================================================
// WebRTC Signalling
//=====================================================================

// Message format based on the Javascript Session Establishment Protocol (JSEP)
// and the AppRTC demonstration app.

// See https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03

message WebRTCMessage {

  enum WebRTCType {
    OFFER = 0;
    ANSWER = 1;
    CANDIDATE = 2;
    BYE = 3;
  }

  WebRTCType type = 1;
  string json = 2;
}

// S->C
message VideoStreamInfo {
  string iceServers = 1;
  string pcConstraints = 2;
  string videoConstraints = 3;
}

//=====================================================================
// Rotation Information
//=====================================================================

// we can't rely on sensor data to accurately trigger screen rotations
// instead, we send a message from the client to do so

// C->S
message RotationInfo  {
  int32 rotation = 1;
}

//=====================================================================
// Other
//=====================================================================

// C<->S
message Ping {
  int64 startDate = 1;
}

//=====================================================================
// App Information (for use in Single App Mode)
//=====================================================================

// C->S
message AppsRequest {
  enum AppsRequestType {
    REFRESH = 0;
    LAUNCH  = 1;
  }

  AppsRequestType type = 1;
  // used for type REFRESH
  repeated AppInfo current      = 2; // list of current apps, to be used during refresh
  int32 screenDensity  = 3; // the screen density of the device
  // used for type LAUNCH
  string pkgName       = 4; // what app to launch, if any
}

// S->C
message AppsResponse {
  enum AppsResponseType {
    REFRESH = 0; // response to a REFRESH request
    EXIT    = 1; // when the app has exited, this gets sent to the client
  }

  AppsResponseType type = 1;
  repeated AppInfo new           = 2; // list of apps to insert
  repeated AppInfo updated       = 3; // list of apps to update (changed name/icon?)
  repeated string removed        = 4; // list of apps to remove (only pkgName needed)
}

// C<->S
message AppInfo {
  string pkgName = 1; // primary key, ex: org.mitre.svmp.client
  string appName = 2; // user-friendly name, ex: SVMP Client
  bytes icon     = 3; // null in Request
  bytes iconHash = 4; // null in Response
}

//=====================================================================
// Keyboard events
//=====================================================================

// C->S
message KeyEvent {
  int64 eventTime   = 1;
  int32 deviceId    = 2;
  int32 flags       = 3;
  // the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
  int64 downTime    = 4;
  int32 action      = 5;
  int32 code        = 6;
  int32 repeat      = 7;
  int32 metaState   = 8;
  int32 scanCode    = 9;
  int32 source      = 10;
   // this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
  string characters = 11;
}

// C->S
message Config {
  bool hardKeyboard = 1; // whether or not we have a hard keyboard attached
}
